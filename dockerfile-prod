# ✅ 安全增强
    # 非 root 用户运行（nextjs:nodejs）
    # 正确的文件权限设置
    # 时区配置统一
# ✅ 性能优化
    # pnpm 缓存清理
    # 只安装生产依赖
    # 多阶段构建减少镜像体积
# ✅ 运维友好
    # 健康检查机制
    # 构建失败处理
    # 环境变量验证（可选）
# ✅ 稳定性保障
    # 生产环境环境变量
    # 时区一致性
    # 文件权限管理

# ======================================================================================
# Stage 1: DEPS - 安装所有依赖 (包括开发依赖)
#
# 这一阶段的目标是利用 Docker 缓存机制。只要 lock 文件不变，就不需要重新安装依赖。
# 这里需要安装所有依赖，因为 `pnpm build` 可能需要 `devDependencies` (例如 typescript)。
# ======================================================================================
FROM node:22-alpine AS deps
WORKDIR /app

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 只复制依赖定义文件
COPY package.json pnpm-lock.yaml* ./

# 安装所有依赖并清理缓存
RUN pnpm install --frozen-lockfile && \
    rm -rf ~/.cache/pnpm && \
    rm -rf .pnpm-store


# ======================================================================================
# Stage 2: BUILDER - 构建应用程序
#
# 这一阶段负责编译源代码，生成生产环境可用的代码 (.next 文件夹)。
# ======================================================================================
FROM node:22-alpine AS builder
WORKDIR /app

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 从 'deps' 阶段复制已经安装好的 node_modules
COPY --from=deps /app/node_modules ./node_modules
# 复制所有项目文件 (利用 .dockerignore 排除不必要的文件)
COPY . .

# 设置构建时需要的环境变量
ENV NODE_ENV=production

# 验证必需的环境变量（可选）
ARG NEXT_PUBLIC_API_URL
RUN if [ -z "$NEXT_PUBLIC_API_URL" ]; then echo "NEXT_PUBLIC_API_URL is required" && exit 1; fi

# 执行构建命令，失败时退出
RUN pnpm build || exit 1


# ======================================================================================
# Stage 3: RUNNER - 运行最终的应用 (生产环境优化版)
#
# 这是最终的生产镜像。它必须尽可能小和安全。
# 关键优化：我们不再从 builder 复制庞大的 node_modules，
# 而是根据 package.json 只安装生产环境必需的依赖。
# ======================================================================================
FROM node:22-alpine AS runner
WORKDIR /app

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户（安全最佳实践）
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 设置环境变量为生产模式，这对 Next.js 的性能至关重要
ENV NODE_ENV=production

# 从 'builder' 阶段复制 package.json 和 lock 文件
COPY --from=builder /app/package.json /app/pnpm-lock.yaml* ./

# --- 核心优化点 ---
# 只安装生产依赖 (`dependencies`)，忽略 `devDependencies`
# 这会创建一个体积小得多的 node_modules 文件夹
RUN pnpm install --prod --frozen-lockfile && \
    rm -rf ~/.cache/pnpm && \
    rm -rf .pnpm-store

# 从 'builder' 阶段复制构建产物和公共静态文件
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next

# 设置正确的文件权限
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app

# 切换到非 root 用户
USER nextjs

# 暴露应用程序运行的端口
EXPOSE 3000

# 健康检查（生产环境必备）
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# 容器启动时执行的命令
CMD ["pnpm", "start"]
